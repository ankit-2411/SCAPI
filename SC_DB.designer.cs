#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SCTest")]
	public partial class SC_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public SC_DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SCTestConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SC_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SC_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SC_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SC_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RequestedAmount;
		
		private System.Nullable<System.DateTime> _IncorporationDate;
		
		private string _LoanPurpose;
		
		private string _Industry;
		
		private int _Revenue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRequestedAmountChanging(int value);
    partial void OnRequestedAmountChanged();
    partial void OnIncorporationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIncorporationDateChanged();
    partial void OnLoanPurposeChanging(string value);
    partial void OnLoanPurposeChanged();
    partial void OnIndustryChanging(string value);
    partial void OnIndustryChanged();
    partial void OnRevenueChanging(int value);
    partial void OnRevenueChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedAmount", DbType="Int NOT NULL")]
		public int RequestedAmount
		{
			get
			{
				return this._RequestedAmount;
			}
			set
			{
				if ((this._RequestedAmount != value))
				{
					this.OnRequestedAmountChanging(value);
					this.SendPropertyChanging();
					this._RequestedAmount = value;
					this.SendPropertyChanged("RequestedAmount");
					this.OnRequestedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorporationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IncorporationDate
		{
			get
			{
				return this._IncorporationDate;
			}
			set
			{
				if ((this._IncorporationDate != value))
				{
					this.OnIncorporationDateChanging(value);
					this.SendPropertyChanging();
					this._IncorporationDate = value;
					this.SendPropertyChanged("IncorporationDate");
					this.OnIncorporationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanPurpose", DbType="NVarChar(250)")]
		public string LoanPurpose
		{
			get
			{
				return this._LoanPurpose;
			}
			set
			{
				if ((this._LoanPurpose != value))
				{
					this.OnLoanPurposeChanging(value);
					this.SendPropertyChanging();
					this._LoanPurpose = value;
					this.SendPropertyChanged("LoanPurpose");
					this.OnLoanPurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Industry", DbType="NVarChar(50)")]
		public string Industry
		{
			get
			{
				return this._Industry;
			}
			set
			{
				if ((this._Industry != value))
				{
					this.OnIndustryChanging(value);
					this.SendPropertyChanging();
					this._Industry = value;
					this.SendPropertyChanged("Industry");
					this.OnIndustryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revenue", DbType="Int NOT NULL")]
		public int Revenue
		{
			get
			{
				return this._Revenue;
			}
			set
			{
				if ((this._Revenue != value))
				{
					this.OnRevenueChanging(value);
					this.SendPropertyChanging();
					this._Revenue = value;
					this.SendPropertyChanged("Revenue");
					this.OnRevenueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
